{"version":3,"file":"lib_index_js.78acae497f01ccd32e2a.js","mappings":"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","sources":["webpack://text-shortcuts/./src/index.ts","webpack://text-shortcuts/./src/utils.ts"],"sourcesContent":["import { get } from \"lodash/fp\";\nimport { CodeMirrorEditor } from '@jupyterlab/codemirror';\nimport {\n    JupyterFrontEnd,\n    JupyterFrontEndPlugin,\n} from \"@jupyterlab/application\";\nimport { INotebookTracker } from \"@jupyterlab/notebook\";\nimport { getPaddedTextToInsert } from \"./utils\";\n\nconst PLUGIN_ID = \"text-shortcuts:plugin\";\n\nconst insertText = (tracker: INotebookTracker) => (args: any) => {\n    const widget = tracker.currentWidget;\n    if (!widget) return;\n\n    // If a kernel name is specified in args, compare with current kernel name.\n    const kernel = get(\"sessionContext.session.kernel\", widget);\n    if (args.kernel && kernel.name !== args.kernel) return;\n\n    const active_editor = get(\"content.activeCell.editor\", widget) as CodeMirrorEditor;\n\n    const { text, autoPad } = args;\n    const insertionText = autoPad ? getPaddedTextToInsert(active_editor, text) : text;\n\n    active_editor.replaceSelection(insertionText);\n};\n\nconst handleActivation = (app: JupyterFrontEnd, tracker: INotebookTracker) => {\n    app.commands.addCommand(\"text-shortcuts:insert-text\", {\n        label: \"Insert Text\",\n        execute: insertText(tracker),\n    });\n};\n\n/**\n * text-shortcuts extension.\n */\nconst extension: JupyterFrontEndPlugin<void> = {\n    id: PLUGIN_ID,\n    autoStart: true,\n    requires: [INotebookTracker],\n    activate: handleActivation,\n};\n\nexport default extension;\n","import { isEqual, pick } from \"lodash/fp\";\nimport { CodeMirrorEditor } from '@jupyterlab/codemirror';\nimport { CodeEditor } from '@jupyterlab/codeeditor';\n\nconst getPaddingText = (\n    pos1: CodeEditor.IPosition,\n    pos2: CodeEditor.IPosition,\n    lastPos: CodeEditor.IPosition,\n    ch: string\n): string => {\n    const pickPos = pick([\"line\", \"column\"]);\n\n    // End of line\n    if (isEqual(pickPos(pos2), pickPos(lastPos))) return \" \";\n\n    // Nothing selected\n    if (isEqual(pickPos(pos1), pickPos(pos2))) return \"\";\n\n    // Already padded\n    if (ch === \" \") return \"\";\n\n    // Not yet padded\n    return \" \";\n};\n\nexport const getPaddedTextToInsert = (\n    editor: CodeMirrorEditor,\n    textToInsert: string\n): string => {\n\n    const lastLineIndex = editor.lastLine();\n    const lastLine = editor.getLine(lastLineIndex);\n    const lastLineSize = lastLine ? lastLine.length : 0;\n    const lastPos: CodeEditor.IPosition = {\n        line: lastLineIndex,\n        column: lastLineSize,\n    };\n    const firstPos: CodeEditor.IPosition = {\n        line: 0,\n        column: 0,\n    };\n\n    const selection = editor.getSelection();\n    const from = selection.start;\n    const to = selection.end;\n\n    let extFrom = from;\n    if (from.line != firstPos.line || from.column != firstPos.column) {\n        extFrom = {line: from.line, column: from.column - 1};\n    }\n\n    let extTo = to\n    if (to.line != lastPos.line || to.column != lastPos.column) {\n        extTo = {line: from.line, column: from.column + 1};\n    }\n\n    const extSelectedText = editor.getRange(\n        {line: extFrom.line, ch: extFrom.column},\n        {line: extTo.line, ch: extTo.column},\n    );\n\n    const leftCh = getPaddingText(\n        from,\n        extFrom,\n        lastPos,\n        extSelectedText.slice(0, 1)\n    );\n    const rightCh = getPaddingText(\n        to,\n        extTo,\n        lastPos,\n        extSelectedText.slice(-1)\n    );\n    const paddedTextToInsert = `${leftCh}${textToInsert}${rightCh}`;\n\n    return paddedTextToInsert;\n};\n"],"names":[],"sourceRoot":""}